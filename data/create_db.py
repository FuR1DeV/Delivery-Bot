# import logging
# import psycopg2
#
# from settings.config import HOST, POSTGRESQL_USER, POSTGRESQL_PASSWORD, DATABASE
#
# logger = logging.getLogger("bot.data.db")
#
#
# class Database:
#
#     def __init__(self):
#         self.connection = psycopg2.connect(host=HOST,
#                                            user=POSTGRESQL_USER,
#                                            password=POSTGRESQL_PASSWORD,
#                                            database=DATABASE)
#         self.connection.autocommit = True
#
#     def new_table_customers(self):
#         logger.debug('Запуск создания новой таблицы заказчика')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS customers
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 500000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     username character varying(255) COLLATE pg_catalog."default",
#                     telephone character varying(255) COLLATE pg_catalog."default",
#                     first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
#                     last_name character varying(255) COLLATE pg_catalog."default",
#                     customer_money decimal NOT NULL DEFAULT 0.0,
#                     customer_rating decimal DEFAULT 5.0,
#                     ban integer DEFAULT 0,
#                     create_orders integer DEFAULT 0,
#                     canceled_orders integer DEFAULT 0,
#                     CONSTRAINT customers_pkey PRIMARY KEY (id)
#                 );"""
#             )
#
#     def new_table_performers(self):
#         logger.debug('Запуск создания новой таблицы исполнителя')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS performers
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 500000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     username character varying(255) COLLATE pg_catalog."default",
#                     telephone character varying(255) COLLATE pg_catalog."default",
#                     first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
#                     last_name character varying(255) COLLATE pg_catalog."default",
#                     performer_money decimal NOT NULL DEFAULT 0,
#                     performer_rating decimal DEFAULT 5.0,
#                     ban integer DEFAULT 0,
#                     get_orders integer DEFAULT 0,
#                     canceled_orders integer DEFAULT 0,
#                     performer_category character varying(255) DEFAULT 'pedestrian' COLLATE pg_catalog."default",
#                     performer_category_limit timestamp without time zone,
#                     CONSTRAINT performers_pkey PRIMARY KEY (id)
#                 );"""
#             )
#
#     def new_table_admins(self):
#         logger.debug('Запуск создания новой таблицы администраторов')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS admins
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 500000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     username character varying(255) COLLATE pg_catalog."default",
#                     first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
#                     last_name character varying(255) COLLATE pg_catalog."default"
#                 );"""
#             )
#
#     def new_table_payment(self):
#         logger.debug('Запуск создания новой таблицы оплаты')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."payment"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     money decimal NOT NULL,
#                     bill_id character varying COLLATE pg_catalog."default" NOT NULL
#                 );"""
#             )
#
#     def new_table_orders(self):
#         logger.debug('Запуск создания новой таблицы заказов')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."orders"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     geo_position_from character varying(255) NOT NULL,
#                     geo_position_to character varying(255) NOT NULL,
#                     title character varying(255) NOT NULL,
#                     price decimal DEFAULT 0,
#                     description character varying(255) NOT NULL,
#                     image character varying(255),
#                     video character varying(255),
#                     in_work bigint DEFAULT 0,
#                     completed integer DEFAULT 0,
#                     order_id character varying COLLATE pg_catalog."default" NOT NULL,
#                     order_create timestamp without time zone NOT NULL,
#                     order_get timestamp without time zone,
#                     order_cancel timestamp without time zone,
#                     order_end timestamp without time zone,
#                     category_delivery character varying(255) NOT NULL,
#                     block integer DEFAULT 0,
#                     performer_category character varying(255) NOT NULL,
#                     order_expired timestamp without time zone,
#                     order_worth integer DEFAULT 0,
#                     order_rating integer DEFAULT 0
#                 );"""
#             )
#
#     def new_table_orders_status(self):
#         logger.debug('Запуск создания новой таблицы статуса заказов')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."orders_status"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     performer_status INTEGER DEFAULT 0,
#                     customer_status INTEGER DEFAULT 0,
#                     order_id character varying COLLATE pg_catalog."default" NOT NULL
#                 );"""
#             )
#
#     def new_table_commission(self):
#         logger.debug('Запуск создания новой таблицы комиссий')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."commission"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     customer decimal DEFAULT 3.3,
#                     performer decimal DEFAULT 3.3,
#                     flowers decimal DEFAULT 2.1,
#                     gifts decimal DEFAULT 2.1,
#                     confection decimal DEFAULT 2.1,
#                     documents decimal DEFAULT 2.1,
#                     loading decimal DEFAULT 2.1,
#                     other decimal DEFAULT 2.1
#                 );"""
#             )
#
            # def check_commission_availability():
            #     with self.connection.cursor() as curs:
            #         curs.execute(
            #             "SELECT * FROM commission"
            #         )
            #         return curs.fetchone()
            # res = check_commission_availability()
            # if res is None:
            #     cursor.execute(
            #         """INSERT INTO commission (customer, performer, flowers, gifts, confection, documents, loading, other)
            #     VALUES (3.3, 3.3, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1);"""
            #     )

#     def new_table_reviews(self):
#         logger.debug('Запуск создания новой таблицы отзывов')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."reviews"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     review_from_customer text,
#                     review_from_performer text,
#                     rating_from_customer integer,
#                     rating_from_performer integer,
#                     order_id character varying COLLATE pg_catalog."default" NOT NULL
#                 );"""
#             )
#
#     def new_table_commission_promo(self):
#         logger.debug('Запуск создания новой таблицы промо комиссий')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."commission_promo"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     percent decimal DEFAULT 0.0,
#                     promo_time timestamp without time zone NOT NULL
#                 );"""
#             )
#
#     def new_table_private_chat_members(self):
#         logger.debug('Запуск создания новой таблицы членов закрытого чата')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."private_chat"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     user_id bigint NOT NULL,
#                     count_word int DEFAULT 0,
#                     enter_date timestamp without time zone NOT NULL
#                 );"""
#             )
#
#     def new_table_orders_rating(self):
#         logger.debug('Запуск создания новой таблицы рейтинга заказов')
#         with self.connection.cursor() as cursor:
#             cursor.execute(
#                 """CREATE TABLE IF NOT EXISTS public."orders_rating"
#                 (
#                     id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 100000 CACHE 1 ),
#                     order_id character varying NOT NULL,
#                     rating int DEFAULT 0,
#                     user_id bigint NOT NULL
#                 );"""
#             )
#
#
# db_obj = Database()
# db_obj.new_table_customers()
# db_obj.new_table_performers()
# db_obj.new_table_payment()
# db_obj.new_table_orders()
# db_obj.new_table_orders_status()
# db_obj.new_table_admins()
# db_obj.new_table_commission()
# db_obj.new_table_commission_promo()
# db_obj.new_table_reviews()
# db_obj.new_table_private_chat_members()
# db_obj.new_table_orders_rating()
